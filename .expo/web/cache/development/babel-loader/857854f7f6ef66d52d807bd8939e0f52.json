{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { isBoolean, isNumber, isString } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport DatabaseReference from \"./DatabaseReference\";\nimport DatabaseStatics from \"./DatabaseStatics\";\nimport DatabaseTransaction from \"./DatabaseTransaction\";\nimport version from \"./version\";\nvar namespace = 'database';\nvar nativeModuleName = ['RNFBDatabaseModule', 'RNFBDatabaseReferenceModule', 'RNFBDatabaseQueryModule', 'RNFBDatabaseOnDisconnectModule', 'RNFBDatabaseTransactionModule'];\n\nvar FirebaseDatabaseModule = function (_FirebaseModule) {\n  _inherits(FirebaseDatabaseModule, _FirebaseModule);\n\n  var _super = _createSuper(FirebaseDatabaseModule);\n\n  function FirebaseDatabaseModule(app, config, databaseUrl) {\n    var _this;\n\n    _classCallCheck(this, FirebaseDatabaseModule);\n\n    _this = _super.call(this, app, config, databaseUrl);\n    _this._serverTimeOffset = 0;\n    _this._customUrlOrRegion = databaseUrl || _this.app.options.databaseURL;\n    _this._transaction = new DatabaseTransaction(_assertThisInitialized(_this));\n    setTimeout(function () {\n      _this._syncServerTimeOffset();\n    }, 100);\n    return _this;\n  }\n\n  _createClass(FirebaseDatabaseModule, [{\n    key: \"_syncServerTimeOffset\",\n    value: function _syncServerTimeOffset() {\n      var _this2 = this;\n\n      this.ref('.info/serverTimeOffset').on('value', function (snapshot) {\n        _this2._serverTimeOffset = snapshot.val();\n      });\n    }\n  }, {\n    key: \"getServerTime\",\n    value: function getServerTime() {\n      return new Date(Date.now() + this._serverTimeOffset);\n    }\n  }, {\n    key: \"ref\",\n    value: function ref() {\n      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n\n      if (!isString(path)) {\n        throw new Error(\"firebase.app().database().ref(*) 'path' must be a string value.\");\n      }\n\n      if (/[#$\\[\\]'?]/g.test(path)) {\n        throw new Error(\"Paths must be non-empty strings and can't contain #, $, [, ], ' or ? | path: \" + path);\n      }\n\n      return new DatabaseReference(this, path);\n    }\n  }, {\n    key: \"refFromURL\",\n    value: function refFromURL(url) {\n      if (!isString(url) || !url.startsWith('https://')) {\n        throw new Error(\"firebase.app().database().refFromURL(*) 'url' must be a valid database URL.\");\n      }\n\n      if (!url.includes(this._customUrlOrRegion)) {\n        throw new Error(\"firebase.app().database().refFromURL(*) 'url' must be the same domain as the current instance (\" + this._customUrlOrRegion + \"). To use a different database domain, create a new Firebase instance.\");\n      }\n\n      var path = url.replace(this._customUrlOrRegion, '');\n\n      if (path.includes('?')) {\n        path = path.slice(0, path.indexOf('?'));\n      }\n\n      return new DatabaseReference(this, path || '/');\n    }\n  }, {\n    key: \"goOnline\",\n    value: function goOnline() {\n      return this.native.goOnline();\n    }\n  }, {\n    key: \"goOffline\",\n    value: function goOffline() {\n      return this.native.goOffline();\n    }\n  }, {\n    key: \"setPersistenceEnabled\",\n    value: function setPersistenceEnabled(enabled) {\n      if (!isBoolean(enabled)) {\n        throw new Error(\"firebase.app().database().setPersistenceEnabled(*) 'enabled' must be a boolean value.\");\n      }\n\n      return this.native.setPersistenceEnabled(enabled);\n    }\n  }, {\n    key: \"setLoggingEnabled\",\n    value: function setLoggingEnabled(enabled) {\n      if (!isBoolean(enabled)) {\n        throw new Error(\"firebase.app().database().setLoggingEnabled(*) 'enabled' must be a boolean value.\");\n      }\n\n      return this.native.setLoggingEnabled(enabled);\n    }\n  }, {\n    key: \"setPersistenceCacheSizeBytes\",\n    value: function setPersistenceCacheSizeBytes(bytes) {\n      if (!isNumber(bytes)) {\n        throw new Error(\"firebase.app().database().setPersistenceCacheSizeBytes(*) 'bytes' must be a number value.\");\n      }\n\n      if (bytes < 1048576) {\n        throw new Error(\"firebase.app().database().setPersistenceCacheSizeBytes(*) 'bytes' must be greater than 1048576 bytes (1MB).\");\n      }\n\n      if (bytes > 104857600) {\n        throw new Error(\"firebase.app().database().setPersistenceCacheSizeBytes(*) 'bytes' must be less than 104857600 bytes (100MB).\");\n      }\n\n      return this.native.setPersistenceCacheSizeBytes(bytes);\n    }\n  }]);\n\n  return FirebaseDatabaseModule;\n}(FirebaseModule);\n\nexport var SDK_VERSION = version;\nexport default createModuleNamespace({\n  statics: DatabaseStatics,\n  version: version,\n  namespace: namespace,\n  nativeModuleName: nativeModuleName,\n  nativeEvents: ['database_transaction_event', 'database_sync_event'],\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: true,\n  ModuleClass: FirebaseDatabaseModule\n});\nexport var firebase = getFirebaseRoot();","map":{"version":3,"sources":["C:/Users/Dell/hackathon/system_campus/node_modules/@react-native-firebase/database/lib/index.js"],"names":["isBoolean","isNumber","isString","createModuleNamespace","FirebaseModule","getFirebaseRoot","DatabaseReference","DatabaseStatics","DatabaseTransaction","version","namespace","nativeModuleName","FirebaseDatabaseModule","app","config","databaseUrl","_serverTimeOffset","_customUrlOrRegion","options","databaseURL","_transaction","setTimeout","_syncServerTimeOffset","ref","on","snapshot","val","Date","now","path","Error","test","url","startsWith","includes","replace","slice","indexOf","native","goOnline","goOffline","enabled","setPersistenceEnabled","setLoggingEnabled","bytes","setPersistenceCacheSizeBytes","SDK_VERSION","statics","nativeEvents","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass","firebase"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isBoolean, isNumber, isString } from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport DatabaseReference from './DatabaseReference';\nimport DatabaseStatics from './DatabaseStatics';\nimport DatabaseTransaction from './DatabaseTransaction';\nimport version from './version';\n\nconst namespace = 'database';\n\nconst nativeModuleName = [\n  'RNFBDatabaseModule',\n  'RNFBDatabaseReferenceModule',\n  'RNFBDatabaseQueryModule',\n  'RNFBDatabaseOnDisconnectModule',\n  'RNFBDatabaseTransactionModule',\n];\n\nclass FirebaseDatabaseModule extends FirebaseModule {\n  constructor(app, config, databaseUrl) {\n    super(app, config, databaseUrl);\n    this._serverTimeOffset = 0;\n    this._customUrlOrRegion = databaseUrl || this.app.options.databaseURL;\n    this._transaction = new DatabaseTransaction(this);\n    setTimeout(() => {\n      this._syncServerTimeOffset();\n    }, 100);\n  }\n\n  /**\n   * Keep the server time offset in sync with the server time\n   * @private\n   */\n  _syncServerTimeOffset() {\n    this.ref('.info/serverTimeOffset').on('value', snapshot => {\n      this._serverTimeOffset = snapshot.val();\n    });\n  }\n\n  /**\n   *\n   * @returns {Date}\n   * @private\n   */\n  getServerTime() {\n    return new Date(Date.now() + this._serverTimeOffset);\n  }\n\n  /**\n   * Returns a new Reference instance from a given path. Defaults to the root reference.\n   * @param path\n   * @returns {DatabaseReference}\n   */\n  ref(path = '/') {\n    if (!isString(path)) {\n      throw new Error(\"firebase.app().database().ref(*) 'path' must be a string value.\");\n    }\n\n    if (/[#$\\[\\]'?]/g.test(path)) {\n      throw new Error(\n        `Paths must be non-empty strings and can't contain #, $, [, ], ' or ? | path: ${path}`,\n      );\n    }\n\n    return new DatabaseReference(this, path);\n  }\n\n  /**\n   * Generates a Reference from a database URL.\n   * Note domain must be the same.\n   * Any query parameters are stripped as per the web SDK.\n   * @param url\n   * @returns {DatabaseReference}\n   */\n  refFromURL(url) {\n    if (!isString(url) || !url.startsWith('https://')) {\n      throw new Error(\n        \"firebase.app().database().refFromURL(*) 'url' must be a valid database URL.\",\n      );\n    }\n\n    if (!url.includes(this._customUrlOrRegion)) {\n      throw new Error(\n        `firebase.app().database().refFromURL(*) 'url' must be the same domain as the current instance (${this._customUrlOrRegion}). To use a different database domain, create a new Firebase instance.`,\n      );\n    }\n\n    let path = url.replace(this._customUrlOrRegion, '');\n    if (path.includes('?')) {\n      path = path.slice(0, path.indexOf('?'));\n    }\n\n    return new DatabaseReference(this, path || '/');\n  }\n\n  /**\n   * goOnline\n   */\n  goOnline() {\n    return this.native.goOnline();\n  }\n\n  /**\n   * goOffline\n   */\n  goOffline() {\n    return this.native.goOffline();\n  }\n\n  /**\n   *\n   * @param enabled\n   */\n  setPersistenceEnabled(enabled) {\n    if (!isBoolean(enabled)) {\n      throw new Error(\n        \"firebase.app().database().setPersistenceEnabled(*) 'enabled' must be a boolean value.\",\n      );\n    }\n\n    return this.native.setPersistenceEnabled(enabled);\n  }\n\n  /**\n   *\n   * @param enabled\n   */\n  setLoggingEnabled(enabled) {\n    if (!isBoolean(enabled)) {\n      throw new Error(\n        \"firebase.app().database().setLoggingEnabled(*) 'enabled' must be a boolean value.\",\n      );\n    }\n\n    return this.native.setLoggingEnabled(enabled);\n  }\n\n  /**\n   *\n   * @param bytes\n   */\n  setPersistenceCacheSizeBytes(bytes) {\n    if (!isNumber(bytes)) {\n      throw new Error(\n        \"firebase.app().database().setPersistenceCacheSizeBytes(*) 'bytes' must be a number value.\",\n      );\n    }\n\n    if (bytes < 1048576) {\n      throw new Error(\n        \"firebase.app().database().setPersistenceCacheSizeBytes(*) 'bytes' must be greater than 1048576 bytes (1MB).\",\n      );\n    }\n\n    if (bytes > 104857600) {\n      throw new Error(\n        \"firebase.app().database().setPersistenceCacheSizeBytes(*) 'bytes' must be less than 104857600 bytes (100MB).\",\n      );\n    }\n\n    return this.native.setPersistenceCacheSizeBytes(bytes);\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/database';\nexport const SDK_VERSION = version;\n\n// import database from '@react-native-firebase/database';\n// database().X(...);\nexport default createModuleNamespace({\n  statics: DatabaseStatics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents: ['database_transaction_event', 'database_sync_event'],\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: true,\n  ModuleClass: FirebaseDatabaseModule,\n});\n\n// import database, { firebase } from '@react-native-firebase/database';\n// database().X(...);\n// firebase.database().X(...);\nexport const firebase = getFirebaseRoot();\n"]},"metadata":{},"sourceType":"module"}