{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isFunction, isNull, isNumber, isObject, isString, isUndefined, isValidPath, promiseWithOptionalCallback } from '@react-native-firebase/app/lib/common';\n\nvar DatabaseOnDisconnect = function () {\n  function DatabaseOnDisconnect(reference) {\n    _classCallCheck(this, DatabaseOnDisconnect);\n\n    this._ref = reference;\n  }\n\n  _createClass(DatabaseOnDisconnect, [{\n    key: \"cancel\",\n    value: function cancel(onComplete) {\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().cancel(*) 'onComplete' must be a function if provided.\");\n      }\n\n      return promiseWithOptionalCallback(this._ref._database.native.onDisconnectCancel(this._ref.path), onComplete);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(onComplete) {\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().remove(*) 'onComplete' must be a function if provided.\");\n      }\n\n      return promiseWithOptionalCallback(this._ref._database.native.onDisconnectRemove(this._ref.path), onComplete);\n    }\n  }, {\n    key: \"set\",\n    value: function set(value, onComplete) {\n      if (isUndefined(value)) {\n        throw new Error(\"firebase.database().ref().value(*) 'value' must be defined.\");\n      }\n\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().set(_, *) 'onComplete' must be a function if provided.\");\n      }\n\n      return promiseWithOptionalCallback(this._ref._database.native.onDisconnectSet(this._ref.path, {\n        value: value\n      }), onComplete);\n    }\n  }, {\n    key: \"setWithPriority\",\n    value: function setWithPriority(value, priority, onComplete) {\n      if (isUndefined(value)) {\n        throw new Error(\"firebase.database().ref().setWithPriority(*) 'value' must be defined.\");\n      }\n\n      if (!isNumber(priority) && !isString(priority) && !isNull(priority)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().setWithPriority(_, *) 'priority' must be a number, string or null value.\");\n      }\n\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().setWithPriority(_, _, *) 'onComplete' must be a function if provided.\");\n      }\n\n      return promiseWithOptionalCallback(this._ref._database.native.onDisconnectSetWithPriority(this._ref.path, {\n        value: value,\n        priority: priority\n      }), onComplete);\n    }\n  }, {\n    key: \"update\",\n    value: function update(values, onComplete) {\n      if (!isObject(values)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().update(*) 'values' must be an object.\");\n      }\n\n      if (!Object.keys(values).length) {\n        throw new Error(\"firebase.database().ref().onDisconnect().update(*) 'values' must be an object containing multiple values.\");\n      }\n\n      var keys = Object.keys(values);\n\n      for (var i = 0; i < keys.length; i++) {\n        if (!isValidPath(keys[i])) {\n          throw new Error('firebase.database().onDisconnect().update(*) \\'values\\' contains an invalid path. Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n        }\n      }\n\n      if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().update(_, *) 'onComplete' must be a function if provided.\");\n      }\n\n      return promiseWithOptionalCallback(this._ref._database.native.onDisconnectUpdate(this._ref.path, {\n        values: values\n      }), onComplete);\n    }\n  }]);\n\n  return DatabaseOnDisconnect;\n}();\n\nexport { DatabaseOnDisconnect as default };","map":{"version":3,"sources":["C:/Users/Dell/hackathon/system_campus/node_modules/@react-native-firebase/database/lib/DatabaseOnDisconnect.js"],"names":["isFunction","isNull","isNumber","isObject","isString","isUndefined","isValidPath","promiseWithOptionalCallback","DatabaseOnDisconnect","reference","_ref","onComplete","Error","_database","native","onDisconnectCancel","path","onDisconnectRemove","value","onDisconnectSet","priority","onDisconnectSetWithPriority","values","Object","keys","length","i","onDisconnectUpdate"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isFunction,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  isValidPath,\n  promiseWithOptionalCallback,\n} from '@react-native-firebase/app/lib/common';\n\nexport default class DatabaseOnDisconnect {\n  constructor(reference) {\n    this._ref = reference;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#cancel\n   */\n  cancel(onComplete) {\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().cancel(*) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectCancel(this._ref.path),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#remove\n   */\n  remove(onComplete) {\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().remove(*) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectRemove(this._ref.path),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#set\n   */\n  set(value, onComplete) {\n    if (isUndefined(value)) {\n      throw new Error(\"firebase.database().ref().value(*) 'value' must be defined.\");\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().set(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectSet(this._ref.path, { value }),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#setwithpriority\n   */\n  setWithPriority(value, priority, onComplete) {\n    if (isUndefined(value)) {\n      throw new Error(\"firebase.database().ref().setWithPriority(*) 'value' must be defined.\");\n    }\n\n    if (!isNumber(priority) && !isString(priority) && !isNull(priority)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().setWithPriority(_, *) 'priority' must be a number, string or null value.\",\n      );\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().setWithPriority(_, _, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectSetWithPriority(this._ref.path, { value, priority }),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#update\n   */\n  update(values, onComplete) {\n    if (!isObject(values)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().update(*) 'values' must be an object.\",\n      );\n    }\n\n    if (!Object.keys(values).length) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().update(*) 'values' must be an object containing multiple values.\",\n      );\n    }\n\n    const keys = Object.keys(values);\n    for (let i = 0; i < keys.length; i++) {\n      if (!isValidPath(keys[i])) {\n        throw new Error(\n          'firebase.database().onDisconnect().update(*) \\'values\\' contains an invalid path. Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"',\n        );\n      }\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().update(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectUpdate(this._ref.path, { values }),\n      onComplete,\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}